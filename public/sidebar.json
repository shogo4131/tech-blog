{"tags":[{"id":"other","createdAt":"2022-09-20T13:15:22.021Z","updatedAt":"2022-10-20T09:22:45.919Z","publishedAt":"2022-09-20T13:15:22.021Z","revisedAt":"2022-09-20T13:15:22.021Z","tag":"その他"},{"id":"typescript","createdAt":"2022-10-20T09:17:30.354Z","updatedAt":"2022-10-20T09:17:30.354Z","publishedAt":"2022-10-20T09:17:30.354Z","revisedAt":"2022-10-20T09:17:30.354Z","tag":"TypeScript"},{"id":"react","createdAt":"2022-10-20T09:16:54.710Z","updatedAt":"2022-10-20T09:16:54.710Z","publishedAt":"2022-10-20T09:16:54.710Z","revisedAt":"2022-10-20T09:16:54.710Z","tag":"React"}],"categories":[{"id":"frontend","createdAt":"2022-10-20T09:14:38.518Z","updatedAt":"2022-10-20T09:22:02.432Z","publishedAt":"2022-10-20T09:14:38.518Z","revisedAt":"2022-10-20T09:14:38.518Z","category":"フロントエンド","post":[{"id":"use-react-componentprops-type","createdAt":"2022-10-20T09:07:53.537Z","updatedAt":"2022-10-20T09:21:50.188Z","publishedAt":"2022-10-20T09:18:50.802Z","revisedAt":"2022-10-20T09:21:50.188Z","title":"ReactのComponentProps型を使って不要なPropsとお別れしよう！！","body":"<p>どうもReactおじさんです。<br><br>ブログをリリースして満足していましたが、記事を執筆しないと価値が無くなってしまうので、だらけずにアプトプットしていこうと思います。<br><br>今回は汎用コンポーネントの作り方です。<br></p><h2 id=\"h22ff7066ae\">一般的な汎用コンポーネントの作り方</h2><p>フロントエンドエンジニアであればコンポーネント作成は避けて通れない道ですよね、、<br><br>今回のメインに行く前に一般的に作られているコンポーネントの作り方をおさらいしましょう。<br><br></p><h3 id=\"he0a8675f39\">ボタンコンポーネントの場合</h3><pre><code>import type { FC, ReactNode } from \"react\";\n\ntype Props = {\n  children: ReactNode;\n  onClick: () =&gt; void;\n};\n\nexport const Button: FC&lt;Props&gt; = ({ children, onClick }) =&gt; {\n  return &lt;button onClick={onClick}&gt;{children}&lt;/button&gt;;\n};</code></pre><p><br></p><h3 id=\"h458ac61db2\">テキストフィールドコンポーネントの場合</h3><pre><code>import type { ChangeEventHandler, FC } from \"react\";\n\ntype Props = {\n  value: string | number;\n  onChange: ChangeEventHandler&lt;HTMLInputElement&gt;;\n};\n\nexport const TextFiled: FC&lt;Props&gt; = ({ value, onChange }) =&gt; {\n  return &lt;input type=\"text\" value={value} onChange={onChange} /&gt;;\n};</code></pre><p><br>ボタンコンポーネントはクリックが可能。<br>テキストフィールドコンポーネントは入力が可能な最低限の機能を備えています。<br><br>では次に、ボタンコンポーネントにボタンのタイプ、活性 or 非活性の機能を追加してみましょう。<br></p><pre><code>import type { FC, ReactNode } from \"react\";\n\ntype Props = {\n  children: ReactNode;\n  onClick: () =&gt; void;\n  disabled: boolean; // 追加\n  type: \"button\" | \"reset\" | \"submit\"; // 追加\n};\n\nexport const Button: FC&lt;Props&gt; = ({ children, onClick, type, disabled }) =&gt; {\n  return (\n    &lt;button type={type} onClick={onClick} disabled={disabled} &gt;\n      {children}\n    &lt;/button&gt;\n  );\n};</code></pre><p><br>disabledとtypeを追加しました。<br>上記の様に何か機能を追加したい時は、ボタンコンポーネントの修正・ボタンコンポーネントを呼び出している親コンポーネントの修正が必要になります。<br><br>一見普通に見えますが、テキストフィールドコンポーネントの場合id、onBulr、name、onKeyDown等の要素やイベントを必要になった時に追加していくのはメンテコストがかかるし受け取るPropsの型定義が冗長になっていきます。<br><br>そこで次に出てくる<strong>ComponentProps</strong>型が救世主となります。<br></p><h2 id=\"h49c99ca828\">ComponentProps型を使用した汎用コンポーネントの作り方</h2><p>ComponentProps型とは、簡単に説明すると指定したコンポーネントのProps型を取得できる型です。<br><br>↓こんな感じ</p><pre><code>type Props = ComponentProps&lt;typeof Button&gt;;</code></pre><p><br><img src=\"undefined\" alt=\"\"><br><br>例えば、先ほどのボタンコンポーネントをComponentProps型に指定すると、<br>ボタンコンコーネントのPropsの型を全て取得できます。<br><br>では、先ほどのボタン・テキストフィールドコンポーネントを修正していきます。<br><br></p><h3 id=\"h75643da8d3\">ボタンコンポーネントの場合(ComponentProps ver)</h3><pre><code>import type { FC, ReactNode, ComponentProps } from \"react\";\n\ntype Props = {\n  children: ReactNode;\n} &amp; ComponentProps&lt;\"button\"&gt;;\n\nexport const Button: FC&lt;Props&gt; = ({ children, ...props }) =&gt; {\n  return &lt;button {...props}&gt;{children}&lt;/button&gt;;\n};</code></pre><p><br>親コンポーネント</p><pre><code>import { Button } from \"../components/button\";\n\nconst Index = () =&gt; {\n  const onClickHandler = () =&gt; console.log(\"click\");\n\n  return (\n    &lt;Button type=\"button\" onClick={onClickHandler}&gt;\n      テスト\n    &lt;/Button&gt;\n  );\n};\n\nexport default Index;</code></pre><p><br></p><h3 id=\"h2deda0682e\">テキストフィールドコンポーネントの場合(ComponentProps ver)</h3><pre><code>import type { ComponentProps, FC } from \"react\";\n\ntype Props = ComponentProps&lt;\"input\"&gt;;\n\nexport const TextFiled: FC&lt;Props&gt; = ({ ...props }) =&gt; {\n  return &lt;input {...props} /&gt;;\n};</code></pre><p><br>親コンコーネント</p><pre><code>import { ChangeEvent, useState } from \"react\";\nimport { TextFiled } from \"../components/textFiled\";\n\nconst Index = () =&gt; {\n  const [value, setValue] = useState(\"\");\n\n  const onChangeHandler = (e: ChangeEvent&lt;HTMLInputElement&gt;) =&gt;\n    setValue(e.target.value);\n\n  return &lt;TextFiled value={value} onChange={onChangeHandler} /&gt;;\n};\n\nexport default Index;</code></pre><p><br>順番に見ていきましょう。<br></p><ol><li>ボタン、テキストフィールドコンポーネント両方に<strong>ComponentProps</strong>を追加</li><li>受け取るPropsをスプレット構文で一括に受け取れるように修正</li><li>受け取ったPropsを各要素に追加</li></ol><p><br>まず1ですが、ComponentProps型を追加してボタンの要素(type,onClick,disabled等)、テキストフィールドの要素(type,onChange,value等)の型を全て受け取っています。<br><br>そして2と3で受け取ったPropsを展開していている形になっています。<br><br>これで親コンポーネントからPropsを渡してもボタン、テキストフィールドコンポーネントは修正せずに済むのでメンテコストがかからずコード量も削減できました。<br><br>ただし、Reactのinput要素はonChange、valueが必須なのでその場合は、下記の様にOmitでComponentPropsから必要な型は除外して、明示的にPropsの型定義を書くことでバグを回避するようにしましょう。<br></p><pre><code>import type { ChangeEventHandler, ComponentProps, FC } from \"react\";\n\ntype Props = {\n  value: string | number;\n  onChange: ChangeEventHandler;\n} &amp; Omit&lt;ComponentProps&lt;\"input\"&gt;, \"value\" |  \"onChange\" &gt;;\n\nexport const TextFiled: FC&lt;Props&gt; = ({ ...props }) =&gt; {\n  return &lt;input {...props} /&gt;;\n};</code></pre><p><br></p><h2 id=\"ha214098e44\">まとめ</h2><ul><li>ComponentProps型は指定したコンポーネントの型を全て取得できる</li><li>普通のHTMLタグの振る舞いをしてほしい場合は、ComponentPropsで型定義した方がメンテコスト、ソース量が削減できる</li><li>コンポーネントに必須な型はOmit等でComponentPropsから除外し、明示的にPropsの型定義をしてバグを防ぐ</li></ul><p><br><br>公式ドキュメントに載っていなかったので理解するのに時間がかかりました、、<br><br>間違っている部分、分かりにくい部分は<a href=\"https://twitter.com/react_nextjs\" target=\"_blank\" rel=\"noopener noreferrer\">Twitter</a>でDMお願いします。<br><br></p>","thumbnail":{"url":"https://images.microcms-assets.io/assets/92d5d05a58d743f0abd69ff4e6ea61a5/dc10b60546504ea99a6b5b7a3e7e3435/react.webp","height":300,"width":600},"description":"ReactのComponentProps型について解説してきます。一般的なコンポーネントの作り方から、ComponentProps型を使用したコンポーネントの作成を行い不要なPropsを取り除く事ができます。","tags":[{"id":"react"},{"id":"typescript"}],"category":[{"id":"frontend"}]}]},{"id":"others","createdAt":"2022-09-13T11:39:10.766Z","updatedAt":"2022-10-05T13:19:22.573Z","publishedAt":"2022-09-13T11:39:10.766Z","revisedAt":"2022-09-20T13:28:44.688Z","category":"その他","post":[{"id":"first-post","createdAt":"2022-09-20T13:13:01.142Z","updatedAt":"2022-10-11T10:18:57.796Z","publishedAt":"2022-09-21T08:11:04.538Z","revisedAt":"2022-10-11T10:18:57.796Z","title":"初投稿！今後のブログ運用について","body":"<p>初めまして！<br>Reactおじさんです。<br><br>7月から取り組んでいた技術ブログがようやくリリースできる形になったので、<br>最低限の機能だけ作ってリリースしました笑(バテたので最低限になってしまった…)<br></p><h2 id=\"h2ba0511ec3\">なぜ技術ブログを作ろうと思ったのか</h2><p>理由はたくさんありますが、厳選して下記3点にまとめてみました！<br><br></p><ul><li>アウトプットできる環境が欲しかった</li><li>転職やカジュアル面談時にアピールできるものが欲しかった</li><li>0から自分のサービスを作ってみたかった</li></ul><p><br></p><h3 id=\"h7216114e93\">アプトプットできる環境が欲しかった</h3><p>結論から言うと、アウトプットした方が知識の定着度が段違いだったことです。<br><br>今までは個人のGithubなどで、ソースを書くくらいしか行ってなかったのですが、<br>人に教えたりする際に、全然言語化できませんでした、、<br><br>言語化をして、分かりやすく人に伝えれて初めて理解したと言えるので、<br>このブログを機に言語化能力を高めようかと思います。<br><br></p><h3 id=\"hc6025208ab\">転職やカジュアル面談時にアピールできるものがほしかった</h3><p>ここ数ヶ月、カジュアル面談に励んでいましたが、<br><br>「個人開発でブログ作ってます！！」、「勉強会で講師やってます！！」<br><br>など話すと、面接官がとても喜んでくれました笑<br>さらに、ブログの内容次第では自分の技術力もアピールできるので、一石二鳥ですね！<br><br></p><h3 id=\"hcee798f356\">0から自分のサービスを作ってみたかった</h3><p>これは、エンジニアになった時から目標にしていた事なんですが、<br>自分でサイトを作って世に公開するという目標が地味にありました。<br><br>2年半程かかってしまいましたが、、笑<br></p><h2 id=\"he235b92c3c\">ブログの技術スタック</h2><p>今回は運用費用を0円にしたかったので、<br>下記のような構成にしました！<br></p><ul><li>Next.js</li><li>CSS Module</li><li>microcms </li><li>Storybook</li><li>Netflify </li></ul><p><br>使った事ない技術が半分くらいあったので、中々手こずりました。。<br></p><h2 id=\"h3bfc3925d3\">今後の方針について</h2><p>とりあえずブログの機能追加をしつつ、記事を量産してければなと思っています。<br><br>最初の方は、フロントエンド向けの記事を増やしつつ、バックエンド・インフラの記事も<br>公開していく予定です！<br><br><br><br>年内に1<strong>0記事</strong>は投稿できるようにしたい。。。</p>","thumbnail":{"url":"https://images.microcms-assets.io/assets/92d5d05a58d743f0abd69ff4e6ea61a5/33883284dba14874a5ef4e0dbab0f1e8/cropPAK86_pennotekakikomi20140312.jpg","height":600,"width":1200},"description":"Reactおじさんがエンジニアとして学習した事をアウトプットしていくブログです。ブログを作った背景、今後の展望を記載します。","tags":[{"id":"other"}],"category":[{"id":"others"}]}]}]}